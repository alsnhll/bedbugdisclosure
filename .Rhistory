pdf("figures/Routput/3dprev.pdf", height=4.5, width=4.5)
persp(bprev.vec, d.vec, prev1, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 1", col=colmat1)
persp(bprev.vec, d.vec, prev2, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 2", col=colmat2)
persp(bprev.vec, d.vec, prev3, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 3", col=colmat3)
persp(bprev.vec, d.vec, prev4, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 4", col=colmat4)
persp(bprev.vec, d.vec, prev5, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 5", col=colmat5)
persp(bprev.vec, d.vec, prev20, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 20", col=colmat20)
dev.off()
# -----------------------------------------------------------------------------
# 4. Make color legend using levelplot from the lattice package:
# -------------------------------------------------------------
pdf("figures/Routput/figure4_legend.pdf", width = 4.5, height = 4.5)
levelplot(prev2, row.values=bprev.vec, col.values=d.vec, aspect="fill",
col.regions=colors, at=seq(0, 10, length.out=101),
xlab="Baseline Prevalence", ylab="Disclosure Index")
dev.off()
library(RColorBrewer)
library(oce)
library(lattice)
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bb disclosure code")
# Set the x- and y- axis breaks, i.e. baseline prevalence and disclosure index,
# respectively
bprev.vec <- seq(0.001, 0.1, length.out = 100)
d.vec <- seq(0.01, 1, length.out = 100)
# -----------------------------------------------------------------------------
# 1. Load and prep data:
# ---------------------
# 1.1 Load costmatrix output ----
cm1 <- readRDS("costmatrix/costmat_yr1.rds")
cm2 <- readRDS("costmatrix/costmat_yr2.rds")
cm3 <- readRDS("costmatrix/costmat_yr3.rds")
cm4 <- readRDS("costmatrix/costmat_yr4.rds")
cm5 <- readRDS("costmatrix/costmat_yr5.rds")
cm20 <- readRDS("costmatrix/costmat_yr20.rds")
# 1.2 Extract prevalence and format into matrix for plotting ----
#     Make a 100 x 100 matrix of prevalence where each cell is the cost for a
#     given baseline prevalence and disclosure index
#     Note: prevalence makes up the first column of the cm matrix
p1 <- cm1[,5]*100
prev1 <- matrix(p1, nrow=length(bprev.vec), ncol=length(d.vec))
p2 <- cm2[,5]*100
prev2 <- matrix(p2, nrow=length(bprev.vec), ncol=length(d.vec))
p3 <- cm3[,5]*100
prev3 <- matrix(p3, nrow=length(bprev.vec), ncol=length(d.vec))
p4 <- cm4[,5]*100
prev4 <- matrix(p4, nrow=length(bprev.vec), ncol=length(d.vec))
p5 <- cm5[,5]*100
prev5 <- matrix(p5, nrow=length(bprev.vec), ncol=length(d.vec))
p20 <- cm20[,5]*100
prev20 <- matrix(p20, nrow=length(bprev.vec), ncol=length(d.vec))
# -----------------------------------------------------------------------------
# 2. Color prep for 3d plots:
# ----------------
#    -   Code adapted from:
#        https://stackoverflow.com/questions/39117827/colorful-plot-using-persp
# 2.1 Set color palette ----
# Set our color palette so that high prevalence is red, and low prevalence is
# yellow
myPalette <- colorRampPalette(brewer.pal(7, "YlOrRd"))
colors <- myPalette(100)
MapColors <- function(mat){
z <- mat
z.facet.center <- (z[-1, -1] + z[-1, -ncol(z)] + z[-nrow(z), -1] + z[-nrow(z), -ncol(z)])/4
colmap <- colormap(z = as.vector(z.facet.center),
breaks = seq(0, 10, length.out=101), col = colors)
colmat <- matrix(colmap$zcol, nrow = 99, ncol = 99)
return(colmat)
}
colmat1 <- MapColors(prev1)
colmat2 <- MapColors(prev2)
colmat3 <- MapColors(prev3)
colmat4 <- MapColors(prev4)
colmat5 <- MapColors(prev5)
colmat20 <- MapColors(prev20)
# -----------------------------------------------------------------------------
# 3. Make 3D color plots:
# -----------------------
pdf("figures/Routput/3dprev.pdf", height=4.5, width=4.5)
persp(bprev.vec, d.vec, prev1, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 1", col=colmat1)
persp(bprev.vec, d.vec, prev2, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 2", col=colmat2)
persp(bprev.vec, d.vec, prev3, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 3", col=colmat3)
persp(bprev.vec, d.vec, prev4, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 4", col=colmat4)
persp(bprev.vec, d.vec, prev5, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 5", col=colmat5)
persp(bprev.vec, d.vec, prev20, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 20", col=colmat20)
dev.off()
# -----------------------------------------------------------------------------
# 4. Make color legend using levelplot from the lattice package:
# -------------------------------------------------------------
pdf("figures/Routput/figure4_legend.pdf", width = 4.5, height = 4.5)
levelplot(prev2, row.values=bprev.vec, col.values=d.vec, aspect="fill",
col.regions=colors, at=seq(0, 10, length.out=101),
xlab="Baseline Prevalence", ylab="Disclosure Index")
dev.off()
library(RColorBrewer)
library(oce)
library(lattice)
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bb disclosure code")
library(RColorBrewer)
library(oce)
library(lattice)
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bb disclosure code")
# Set the x- and y- axis breaks, i.e. baseline prevalence and disclosure index,
# respectively
bprev.vec <- seq(0.001, 0.1, length.out = 100)
d.vec <- seq(0.01, 1, length.out = 100)
# -----------------------------------------------------------------------------
# 1. Load and prep data:
# ---------------------
# 1.1 Load costmatrix output ----
cm1 <- readRDS("costmatrix_output/costmat_yr1.rds")
cm2 <- readRDS("costmatrix_output/costmat_yr2.rds")
cm3 <- readRDS("costmatrix_output/costmat_yr3.rds")
cm4 <- readRDS("costmatrix_output/costmat_yr4.rds")
cm5 <- readRDS("costmatrix_output/costmat_yr5.rds")
cm20 <- readRDS("costmatrix_output/costmat_yr20.rds")
# 1.2 Extract prevalence and format into matrix for plotting ----
#     Make a 100 x 100 matrix of prevalence where each cell is the cost for a
#     given baseline prevalence and disclosure index
#     Note: prevalence makes up the first column of the cm matrix
p1 <- cm1[,5]*100
prev1 <- matrix(p1, nrow=length(bprev.vec), ncol=length(d.vec))
p2 <- cm2[,5]*100
prev2 <- matrix(p2, nrow=length(bprev.vec), ncol=length(d.vec))
p3 <- cm3[,5]*100
prev3 <- matrix(p3, nrow=length(bprev.vec), ncol=length(d.vec))
p4 <- cm4[,5]*100
prev4 <- matrix(p4, nrow=length(bprev.vec), ncol=length(d.vec))
p5 <- cm5[,5]*100
prev5 <- matrix(p5, nrow=length(bprev.vec), ncol=length(d.vec))
p20 <- cm20[,5]*100
prev20 <- matrix(p20, nrow=length(bprev.vec), ncol=length(d.vec))
# -----------------------------------------------------------------------------
# 2. Color prep for 3d plots:
# ----------------
#    -   Code adapted from:
#        https://stackoverflow.com/questions/39117827/colorful-plot-using-persp
# 2.1 Set color palette ----
# Set our color palette so that high prevalence is red, and low prevalence is
# yellow
myPalette <- colorRampPalette(brewer.pal(7, "YlOrRd"))
colors <- myPalette(100)
MapColors <- function(mat){
z <- mat
z.facet.center <- (z[-1, -1] + z[-1, -ncol(z)] + z[-nrow(z), -1] + z[-nrow(z), -ncol(z)])/4
colmap <- colormap(z = as.vector(z.facet.center),
breaks = seq(0, 10, length.out=101), col = colors)
colmat <- matrix(colmap$zcol, nrow = 99, ncol = 99)
return(colmat)
}
colmat1 <- MapColors(prev1)
colmat2 <- MapColors(prev2)
colmat3 <- MapColors(prev3)
colmat4 <- MapColors(prev4)
colmat5 <- MapColors(prev5)
colmat20 <- MapColors(prev20)
# -----------------------------------------------------------------------------
# 3. Make 3D color plots:
# -----------------------
pdf("figures/Routput/3dprev.pdf", height=4.5, width=4.5)
persp(bprev.vec, d.vec, prev1, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 1", col=colmat1)
persp(bprev.vec, d.vec, prev2, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 2", col=colmat2)
persp(bprev.vec, d.vec, prev3, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 3", col=colmat3)
persp(bprev.vec, d.vec, prev4, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 4", col=colmat4)
persp(bprev.vec, d.vec, prev5, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 5", col=colmat5)
persp(bprev.vec, d.vec, prev20, phi=25, theta=220,
xlab="\n Baseline prev. (%)", ylab="\n Renter selectivity",
zlab = "\n Year-end prev. (%)", border=NA,
main = "Prevalence Year 20", col=colmat20)
dev.off()
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/")
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bb disclosure code")
gt <- read.csv("data_googletrends/bedbugs_googletrend.csv")
gt <- read.csv("data/bedbugs_googletrend.csv")
str(gt)
head(gt)
class(gt)
head9gt
head(gt)
summary(gt)
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bb disclosure code")
gt <- read.csv("data/bedbugs_googletrend.csv")
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bb disclosure code")
gt <- read.csv("data/bedbugs_googletrend.csv", stringsAsFactors = F)
str(gt)
ggplot() +
geom_line(data=gt, aes(x=Month, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
ylim(c(0,17)) +
labs(x="Time (year-month)", y = "Break-even point (years)")
library(ggplot2)
ggplot() +
geom_line(data=gt, aes(x=Month, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
ylim(c(0,17)) +
labs(x="Time (year-month)", y = "Break-even point (years)")
gt$Month <- as.Date(gt$month, format="%Y-%m")
head(gt$Month)
gt$Month <- as.Date(gt$month, format="%Y-%m")
gt$month <- as.Date(gt$Month, format="%Y-%m")
head(gt$month)
head(gt$Month)
gt$month <- as.Date(gt$Month, "%Y-%m")
head(gt$month)
as.Date("2001-01", "%Y-%m")
as.Date("2001-01-01")
as.Date("2001-01")
as.Date("2001-Jan", "%Y-%b")
?as.Date
library(ggplot2)
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bb disclosure code")
gt <- read.csv("data/bedbugs_googletrend.csv")
head(gt)
str(gt)
ggplot() +
geom_line(data=gt, aes(x=Month, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
ylim(c(0,17)) +
labs(x="Time (year-month)", y = "Break-even point (years)")
ggplot() +
geom_line(data=gt, aes(x=Month, y=Search_frequency)) +
theme_classic() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
labs(x="Time (year-month)", y = "Break-even point (years)")
summary(gt$Month)
plot(gt$Month, Search_frequency)
plot(gt$Month, gt$Search_frequency)
dim(gt)
gt$x <- 1:dim(gt)[1]
head(gt)
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_classic() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
labs(x="Time (year-month)", y = "Break-even point (years)")
dev.off()
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_classic() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
labs(x="Time (year-month)", y = "Break-even point (years)")
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_classic() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
labs(x="Time (year)", y = "Search frequency")
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_classic() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
labs(x="Year", y = "Search frequency")
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
labs(x="Year", y = "Search frequency")
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_classic() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
labs(x="Year", y = "Search frequency")
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_classic() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(x="Year", y = "Search frequency")
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(x="Year", y = "Search frequency")
scale_x_continuous(breaks=seq(1, dim(gt)[1], by=12)
)
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_x_continuous(breaks=seq(1, dim(gt)[1], by=12)
)
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
scale_x_continuous(breaks=seq(1, dim(gt)[1], by=12))
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
scale_x_continuous(breaks=seq(1, dim(gt)[1], by=24), labels=c(2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018))
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
scale_x_continuous(breaks=seq(1, dim(gt)[1], by=24),
labels=c(2004, 2006, 2008, 2010, 2012, 2014, 2016,
2018)) +
labs(x="Year", y = "Search frequency")
pdf("supplement/sfig_yearsuntilsavings.pdf", height=4.5, width=6)
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
scale_x_continuous(breaks=seq(1, dim(gt)[1], by=24),
labels=c(2004, 2006, 2008, 2010, 2012, 2014, 2016,
2018)) +
labs(x="Year", y = "Search frequency")
dev.off()
library(deSolve)
library(ggplot2)
library(reshape2)
library(ggplot2)
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bb disclosure code")
# Source the functions we will need for our analyses.
source("functions.R")
# Set disclosure index (d).
bprev <- .2
d <- 0.5
# Set parameter values and bed bug-related costs.
preparam <- SetParameters()
bbcosts <- SetCost()
# Solve for beta to get the desired baseline prevalence in the absence of
# disclosure. Append these and bprev to our vector of parameter values.
beta <- GetBeta(preparam, bprev)
param <- c(preparam, beta, base.prev = bprev)
# Get initial conditions (Sr0, Ir0, etc.) and append these and d to our vector
# of parameter values.
init <- GetInit(param)
param.init <- c(param, init, d = d)
# Set the years over which to run the simulation and get the cost of disclosure.
years <- c(1:200)
# Run the GetCost function which outputs a data frame of total and component
# costs, along with prevalence over the years of the disclosure simulation.
cost.df <- GetCost(param.init, bbcosts, years)
cost.df
bp <- c(1,2:8, 9:12, 13, 14, 15, 16, 16.3)
yrs <- c(4, rep(5,7), rep(6,4), 7, 8, 9, 13, 17)
df <- data.frame(bp=bp, yrs=yrs)
plot(bp, yrs, type="b", ylim=c(0, 17))
pdf("supplement/sfig_yearsuntilsavings.pdf", height=5, width=6)
ggplot() +
geom_line(data=df, aes(x=bp, y=yrs)) +
geom_point(data=df, aes(x=bp, y=yrs), size=3) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
ylim(c(0,17)) +
labs(x="Baseline prevalence (%)", y = "Break-even point (years)")
dev.off()
library(ggplot2)
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bb disclosure code")
gt <- read.csv("data/bedbugs_googletrend.csv")
gt$x <- 1:dim(gt)[1]
pdf("supplement/sfig_googletrends.pdf", height=4.5, width=6)
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
scale_x_continuous(breaks=seq(1, dim(gt)[1], by=24),
labels=c(2004, 2006, 2008, 2010, 2012, 2014, 2016,
2018)) +
labs(x="Year", y = "Search frequency")
dev.off()
library(ggplot2)
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bb disclosure code")
gt <- read.csv("data/bedbugs_googletrend.csv")
gt$x <- 1:dim(gt)[1]
pdf("supplement/sfig_googletrends.pdf", height=5, width=7)
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
scale_x_continuous(breaks=seq(1, dim(gt)[1], by=24),
labels=c(2004, 2006, 2008, 2010, 2012, 2014, 2016,
2018)) +
labs(x="Year", y = "Search frequency")
dev.off()
library(ggplot2)
setwd("/Users/sxs/Dropbox/Levy Lab/bb_properties/bb disclosure code")
gt <- read.csv("data/bedbugs_googletrend.csv")
gt$x <- 1:dim(gt)[1]
pdf("supplement/sfig_googletrends.pdf", height=5, width=7.5)
ggplot() +
geom_line(data=gt, aes(x=x, y=Search_frequency)) +
theme_bw() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
scale_x_continuous(breaks=seq(1, dim(gt)[1], by=24),
labels=c(2004, 2006, 2008, 2010, 2012, 2014, 2016,
2018)) +
labs(x="Year", y = "Search frequency")
dev.off()
tail(gt)
